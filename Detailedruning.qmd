---
title: "Modeling in Mexican Cities using using Aerosol Optical Depth and Meteorological Reanalysis Data"
format: html
---


This is a tutorial explaininn the basic usage of the the scripts to obthain the result of the *"Modeling in Mexican Cities using  Aerosol Optical Depth and Meteorological Reanalysis Data"* article 


The scrips will be added and the basic usage will be explain here. 


All the data was downloaded from the sources describe in the article. 



## Data gattering 
* The data from the *ECMWF* the Planetary boundary layer his downloaded obtain using the  get_average_grib.py

* Data from the GEE is obtained using the notebook './Python_scripts/get_years_GEE_data_fix.ipynb' and chanche acordently.

* Data from the stations is obtaine using the API from SINAICA. 






## With all the data 

1. Daily Panetary Boundary layer with a single raster use the `./Python_scripts/get_average_grib.py`

```bash
python python ./Python_scripts/get_average_grib.py  --grib_file "./data/ECMWF/2022_PBLH.grib" --path_dir_day_average './data/raster/ECMWF_rasters/2022/' --initial_day "2022-01-01" --final_day "2022-12-31"
```

For the one of the metropolitan areas and merge with the data Downloades from GEE

2. All the bands with  `./Python_scripts/get_res_cut_merge.py`

```bash

 python ./Python_scripts/get_res_cut_merg.py --grib_file ./data/ECMWF/2022_PBLH.grib  --path_dir_day_average ./data/raster/ECMWF_rasters/2022/ --path_dir_multy_band ./data/raster/AOD_REA_GEE/ZMVM/2022/ --path_dir_resample ./data/raster/middle_PBLH/resample/2022/ --path_dir_cut ./data/raster/middle_PBLH/cut/2022/  --path_dir_merge ./data/raster/middle_PBLH/all_bands/2022/ --file_metropolitan_polygon ./data/Zonas_metro/ZMVM.shp
```


::: {.callout-warning }
The data in the folders has to be complete (all day tor the year for bouth, the PBLH rasters and the AOD_reanalisys data) if not an error occur. 
:::

The predictions are made using a bash code that runs the R codes, the roads layer had to be readable form R. 





3.  All is done using the ` ./R_scripts/multiple_yearpredictions.sh` file. 

    * The R scrtipt does all for a time interval is `./year_prediction_day_just_script.R` is a wrapper of the `year_prediction_day_just_script.sh` that calls the functions created in R to call all the necesary data 

        * --path_estations_cont is the path where the data from the stations are store, this data is the one with the daily stations, 
        * --path_estations_location 
        * --path_estations_location
        * --path_save_coef
        * --path_data_raster
        * --path_vialidades
        * -s Start date
        * -e End date 
        * --year The year that is been done  
        * --file_name_datos_pm path to a file to store the pm data. 


The file that woork for an entire year is `year_prediction_day_just_script.R` and the call is as follow:

```bash
   Rscript year_prediction_day_just_script.R --path_estations_cont "../data/R_data/BDA_exemp.Rda" --path_estations_location "../data/Estaciones/Coord_estaciones_SINAICA.xlsx" --path_save_predictions "../data/raster/ZMVM_predictions/2022/" --prefix_save "predi_25PM_" --path_save_coef "../data/coefficient_models/" --path_data_raster "../data/raster/middle_PBLH/all_bands/2022/" --path_vialidades "../data/Vialidades/ZMVM/all_vialidades_2.tif" -s "2022-01-01" -e "2022-12-31" --year 2022 --zona_metro "ZMVM" --file_name_datos_pm "../data/data_station_obtained/pm_data_2022.csv"
```

The script take a time interval and obtain the yearly model and available dayly estimations are made. 

After all predictions are made the name ob the bands has to be added, this step could be avoided if thi fix to set the name directly in R. 

4. To change the name bands a python script is done `call_renamebands.sh` 
    4.1 The script Python script that is called is the `rename_bands_predictions.py` 
    

A new folder is made with the link files to the prediction file for each seasonal period. In this example the seasons are restricted to the single year. 


5. The scrip to create the link is `create_links.sh`

Whit the predictions for each season separated the tensor spline for each season is created. 


6. It's done inside **R** using the function `get_all_seasons_interval` that is in the `spline_year_predictions.R` file. 


From **R**

> knitr::purl("./spline_year_predictions.qmd")
>get_all_seasons_interval(
    "./data/raster/all_predictions_symlinks/",
    "./data/raster/Season_tensor_9PBLH/seasons_total/",
    "2022",
    "2009-03-01"
    )

 Se tienen que renombrar la banda en el tensor spline.

7. Se hace con el script ./python_cont/rename_single_string.py



AQUI es donde tenemos que modificar para tomar en consideración el cambio en las estimaciones usando el modelo 3.  Se usa el spline y se modifica para obtener una predicción 
cuando no se tiene AOD 

Se hace la prediccion diaria por temporada con la función en R

8. Se hace desde R con la función  get_all_days_spline_interval que se encuentra en spline_year_predictions.qmd



> get_all_days_spline_interval(
    start_date  = "2004-03-01",
    end_date = "2004-04-30", 
    file_path_prediction =  "./datos/raster/all_predictions_symlinks/",
    file_path_season_tensor= "./datos/raster/Season_tensor_9PBLH/seasons_total/",
    data_pm_reanalisis_est = "./datos/datos_predic/", 
    complete_band =  "temperature_2m",
    splin_band ="PM25_predict",
    prefix_predic = "predi_25PM_",
    path_save_predictions_2 = "./datos/raster/ZMVM_9PBLH_seasons_days/",
    prefix_save_predic_2= "predict_just_warm_"
)

Por como se genera las estimaciones en las funcions model 3 es necesario cambiarlas de lugar  se hace con move_pred_m3.sh


Se tienen que renombrar la banda y pegar

Para renombrar la banda utilizamos el script ya hecho 

9. Se hace con el script ./python_cont/rename_single_string.py
9.1 for YEAR in {2004..2022}; do  python rename_single_string.py --season_spline_path "../datos
/raster/ZMVM_9PBLH_seasons_days/$YEAR/" --name_band "PM25_predict_spline"; done


Se pegan el spline con la prediccion de los datos


10.  python glue_bands_folder_all.py  --day_season_spline_path "../datos/raster/ZMVM_9PBLH_seasons_days/" --day_predictions  "../datos/raster/ZMVM_predictions_9PBLH/" --save_path_glue "../datos/raster/ZMVM_9PBHL_prediction_glue/" --start_year "2006" --end_year "2022"
Como se cambio la forma del string del archivo se tuvo que hacer una modificación al programa entonce se utiliza el glue_bands_folder_all_M3.py

10.2.  python glue_bands_folder_all.py  --day_season_spline_path "../datos/raster/ZMVM_9PBLH_seasons_days/" --day_predictions  "../datos/raster/ZMVM_predictions_9PBLH/" --save_path_glue "../datos/raster/ZMVM_9PBHL_prediction_glue/" --start_year "2006" --end_year "2022"
10.3  python glue_bands_folder_all_M3.py  --day_season_spline_path "../datos/raster/ZMVM_All/model_3_predict/" --day_predictions  "../datos/raster/ZMVM_All/ZMVM_predictions_9PBLH/" --save_path_glue "../datos/raster/ZMVM_All/model_3_glue/" --start_year "2004" --end_year "2022"


Se tiene que unir las bandas en una sola, esto se hace usando el script merge_PM_25_bands

11. python merge_PM_25_bands.py --path_glue_rasters "../datos/raster/ZMVM_9PBHL_prediction_glue/" --save_path_merge "../datos/raster/ZMVM_9PBHL_merge_final/" --upper_band "PM25_predict" --under_band "PM25_predict_spline" --merge_band "PM25_merge" --save_prefix "PM25_merge_" --start_year 2006 --end_year 2022 --verbose TRUE



Con estos pasos terminamos para hacer todo el proceso de Just. 

