# AUTOGENERATED! DO NOT EDIT! File to edit: ../Just_todo_2.ipynb.

# %% auto 0
__all__ = ['set_single_band_name', 'add_band', 'glue_prediction_season', 'merge_pm25_bands', 'merge_pm25_bands_folders', 'glue_prediction_season_m3']

# %% ../Just_todo_2.ipynb 2
import os 
import rasterio
import os 
import pandas as pd 
import math
import numpy as np

def set_single_band_name(file_path,string):
    '''
    The function renames the band in the file
    '''
    dst_m= rasterio.open(file_path,'r+',  driver =  'GTiff')

    dst_m.set_band_description(1, string)
    dst_m.close()
    return

# %% ../Just_todo_2.ipynb 5
def add_band(raster_single, 
            raster_multiple, 
            raster_save
            ):
    """
    Add a band in the raster_single file to the raster in the 
    raster_multiple
    """
    print('read file single band: ' ,raster_single )
    raster_single_ras= rasterio.open(
        raster_single,
        "r"
    )
    print('read file multiple bands: ' ,raster_multiple )
    raster_multiple_ras = rasterio.open(
        raster_multiple,
        "r"
    )
    kwargs_save = raster_multiple_ras.meta.copy()
    des_mul = list(raster_multiple_ras.descriptions)
    des_mul.append(raster_single_ras.descriptions[0])
    des_mul = tuple(des_mul)
    kwargs_save.update({
        "count":raster_multiple_ras.count +1,
        "descriptions":des_mul,
    })
    print('saving file with all bands: ' ,raster_save)
    save_raster =  rasterio.open(
        raster_save, 
        "w",
        **kwargs_save
    )
    for i in range(1, save_raster.count+1):
        if i < save_raster.count:
            save_raster.write(raster_multiple_ras.read(i), i)
            save_raster.set_band_description(i, des_mul[i-1])


        else:
            save_raster.write(raster_single_ras.read(1), i)
            save_raster.set_band_description(i, des_mul[i-1])

    save_raster.descriptions = kwargs_save["descriptions"]
    save_raster.close()

    return

# %% ../Just_todo_2.ipynb 10
def glue_prediction_season(
    path_predic_spline = "./datos/raster/ZMVM_9PBLH_seasons/2018/",
    path_predic_multiple = "./datos/raster/ZMVM_predictions_9PBLH/2018/",
    path_glue  = "./datos/raster/ZMVM_9PBLH_prediction_glue/2018/",
    prefix_save = "PM25_glue_"
    ):
    """
    Function wraph the glue the rasters 
    """
    #Multy band
    
    files_predic_multiple =  os.listdir(path_predic_multiple )
    files_predic_multiple= [file for file in files_predic_multiple if file.endswith( '.tif')]
    files_predic_multiple = [path_predic_multiple + file for file in  files_predic_multiple]
    ### single band
    files_predic_season =  os.listdir(path_predic_spline )
    files_predic_season = [file for file in files_predic_season if file.endswith( '.tif')]
    files_predic_season = [path_predic_spline + file for file in  files_predic_season] 
    ## SaveTo 
    
    # date_parts  = [sub_path  for file in  files_predic_multiple for sub_path in file[file.rfind("/")+1:file.rfind(".tif")].split('_') if sub_path.isdigit() ]
    date_parts  = [ file_p[file_p.rfind("/")+1:file_p.rfind(".tif")].split('_')  for file_p in  files_predic_multiple ]
    date_parts = [[i for i in lis if i.isdigit()] for lis in date_parts]
    date_strings_multy  = ['_'.join(lis) for lis in date_parts]
    df_multy = pd.DataFrame({'file_complete':files_predic_multiple, 'date':date_strings_multy})

    date_parts_single  = [ file_p[file_p.rfind("/")+1:file_p.rfind(".tif")].split('_')  for file_p in  files_predic_season ]
    date_parts_single = [[i for i in lis if i.isdigit()] for lis in date_parts_single]
    date_strings_single  = ['_'.join(lis) for lis in date_parts_single]
    df_single = pd.DataFrame({'file_complete':files_predic_season, 'date':date_strings_single})

    df_all = df_multy.merge(df_single, on = 'date', how='left')
    df_all['save_file'] =  df_all['date'].apply(lambda l : path_glue+ prefix_save+ l+ ".tif")
    df_all[~df_all['file_complete_y'].isnull()]
    print(df_all)
    for row in df_all[~df_all['file_complete_y'].isnull()].iterrows():
        print('file  single:',row[1]['file_complete_y'])
        print('file multiple:',row[1]['file_complete_x'])
        print('file to save:',row[1]['file_complete_y'])
        add_band(
                raster_single = row[1]['file_complete_y'], 
                raster_multiple =row[1]['file_complete_x'], 
                raster_save = row[1]['save_file']
            )
    return 

# %% ../Just_todo_2.ipynb 15
def merge_pm25_bands(
        raster_bands_path,
        raster_bands_merge_path,
        band_upper = 'PM25_predict',
        band_under = 'PM25_predict_spline',
        band_merge = 'PM25_merge',
        verbose= False
    ):
    """
    Function to merge the two PM25 bands where if the first band has no data is subtitute for the second. 
    """
    if verbose:
        print('Reading file: ', raster_bands_path)
    raster_bands_all = rasterio.open(
            raster_bands_path,
            "r+"
        )
    try:
        raster_bands_all.descriptions.index(band_upper)
    except:
        print('No upper band, no merge of band is done and no file created')
        return

    
    upper_band = raster_bands_all.read(raster_bands_all.descriptions.index(band_upper)+1, masked= True)
    under_band = raster_bands_all.read(raster_bands_all.descriptions.index(band_under)+1, masked= True)

    upper_band[upper_band.mask] = under_band[upper_band.mask]

    raster_merge_bands_all_dic =  raster_bands_all.meta.copy()
    raster_merge_bands_all_dic.update({'count':raster_merge_bands_all_dic['count'] + 1 })
    if verbose:
        print('Saving file: ', raster_bands_merge_path)
    raster_merge_bands_all = rasterio.open(
            raster_bands_merge_path,
            "w",
            **raster_merge_bands_all_dic
        )
    for band_num in  range(1, raster_merge_bands_all_dic['count'] + 1 ) :
        if verbose:
            print('band num ', band_num)
        if band_num <= raster_merge_bands_all_dic['count']-1:
            if verbose:
                print('Saving band : ',raster_bands_all.descriptions[band_num-1] )
            raster_merge_bands_all.write(raster_bands_all.read(band_num), band_num) 
            raster_merge_bands_all.set_band_description(band_num,raster_bands_all.descriptions[band_num-1] )

        else: 
            if verbose:
                print('Saving band : ',band_merge)
            raster_merge_bands_all.write(upper_band, band_num) 
            raster_merge_bands_all.set_band_description(band_num,band_merge )

    raster_merge_bands_all.close()
    raster_bands_all.close()

    return

# %% ../Just_todo_2.ipynb 18
def merge_pm25_bands_folders(
    path_predic_glue ,
    path_predic_exit ,
    band_under= 'PM25_predict_spline',
    band_upper= 'PM25_predict',
    band_merge = 'PM25_merge',
    prefix_save = "PM25_merge_",
    verbose =False
    ):
    """
    The function merge the two bands together
    """
    if verbose:
        print("Folder spline_predictions:",path_predic_glue)
        print("Folder predictions merge:",path_predic_exit)
        print("UNDER band:",band_under)        
        print("Upper band:",band_upper)
    files_glue =  os.listdir(path_predic_glue )
    files_glue= [file for file in files_glue if file.endswith( '.tif')]
    files_glue = [path_predic_glue + file for file in  files_glue]
    date_parts_glue  = [ file_p[file_p.rfind("/")+1:file_p.rfind(".tif")].split('_')  for file_p in  files_glue ]
    date_parts_glue = [[i for i in lis if i.isdigit()] for lis in date_parts_glue]
    date_parts_glue  = ['_'.join(lis) for lis in date_parts_glue]
    df_glue = pd.DataFrame({'file_complete':files_glue, 'date':date_parts_glue})
    df_glue['save_file'] =  df_glue['date'].apply(lambda l : path_predic_exit+ prefix_save+ l+ ".tif")
    if verbose:
        print(df_glue.head())
    for row in df_glue.iterrows():
        if verbose:
            print('file to read: ', row[1]['file_complete'])
            print('file to save: ',row[1]['save_file'])
            print('upper band: ',band_upper )
            print('under band: ',band_under) 
        merge_pm25_bands(
            row[1]['file_complete'],
            row[1]['save_file'],
            band_upper = band_upper,
            band_under = band_under,
            band_merge =  band_merge ,
            verbose= False
            )
    return 
    
    
    
def glue_prediction_season_m3(
    
    path_predic_spline ,
    path_predic_multiple,
    path_glue  ,
    prefix_save = "PM25_glue_"
    ):
    """
    Function wraph the glue the rasters 
    """
    #Multy band

    files_predic_multiple =  os.listdir(path_predic_multiple )
    files_predic_multiple= [file for file in files_predic_multiple if file.endswith( '.tif')]
    files_predic_multiple = [path_predic_multiple + file for file in  files_predic_multiple]
    ### single band
    files_predic_season =  os.listdir(path_predic_spline )
    files_predic_season = [file for file in files_predic_season if file.endswith( '.tif')]
    files_predic_season = [path_predic_spline + file for file in  files_predic_season]
    ## SaveTo 


    date_parts  = [ file_p[file_p.rfind("/")+1:file_p.rfind(".tif")].split('_')  for file_p in  files_predic_multiple ]
    date_parts = [[i for i in lis if i.isdigit()] for lis in date_parts]
    date_strings_multy  = ['_'.join(lis) for lis in date_parts]
    df_multy = pd.DataFrame({'file_complete':files_predic_multiple, 'date':date_strings_multy})
    print(df_multy.head())
    print(df_multy.head().iloc[0]['file_complete'])
    date_parts_single  = [ file_p[file_p.rfind("/")+1:file_p.rfind(".tif")].split('_')  for file_p in  files_predic_season ]
    date_parts_single = [[i for i in lis if i.isdigit()] for lis in date_parts_single]
    date_strings_single  = ['_'.join(lis[1:]) for lis in date_parts_single]
    df_single = pd.DataFrame({'file_complete':files_predic_season, 'date':date_strings_single})
    print(df_single.head())
    print(df_single.head().iloc[0]['file_complete'])
    df_all = df_multy.merge(df_single, on = 'date', how='left')
    df_all['save_file'] =  df_all['date'].apply(lambda l : path_glue+ prefix_save+ l+ ".tif")
    df_all[~df_all['file_complete_y'].isnull()]
    print(df_all.head())
    print(df_all.head().iloc[0]['save_file'])
    print(df_all.head().iloc[0]['file_complete_x'])
    for row in df_all[~df_all['file_complete_y'].isnull()].iterrows():
        print('file  single:',row[1]['file_complete_y'])
        print('file multiple:',row[1]['file_complete_x'])
        print('file to save:',row[1]['file_complete_y'])
        add_band(
                raster_single = row[1]['file_complete_y'],
                raster_multiple =row[1]['file_complete_x'],
                raster_save = row[1]['save_file']
            )
    return
