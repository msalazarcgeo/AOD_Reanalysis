---
title: "Generación del modelo 3 "
toc: true
number-sections: true
format: 
    html:
        code-fold: true
    pdf:
        geometry: 
        - top=30mm
        - left=20mm
        shift-heading-level-by: -1
---

This nothebook contains how to obtain the daily spline using the previus functions, and as example on how is obtained. The detaile on how to run it to just 



$$
\sqrt{predPM_{i,j}} = \alpha +\beta_1 \sqrt{MPM_j} + \beta_2\sqrt{S(X_i,Y_i)}_{k(j)} + \epsilon
$$

Vamos a obtener todos los datos que se necesitan pero usando las prediciones. 


```{r}
#| purl: true
#| echo: false
rm(list = ls())
if (!require("pacman")) install.packages("pacman");

pacman::p_load(tidyverse, sf, lubridate, ggplot2, ggpmisc, lme4, gridExtra, magrittr, dplyr, geosphere, Metrics,MLmetrics, ggridges, reshape2, gstat, raster,tibble, spacetime, rlang,  multilevelTools, readxl, mgcv, knitr)

source("./Just_todo_process.R")
source("./Just_todo_2.R")
source("./spline_year_predictions.R")
source("./year_prediction_day_just.R")
```

```{r}
get_all_seasons_interval <- function(
    prediction_path  ,
    save_path_season ,
    start_date ,
    end_date ,
    complete_band = "temperature_2m",
    splin_band = "PM25_predict",
    ...
    ){
    
    #get seasons 
    ### Here a modification for each metropolitan area has to be done 
    all_days <- seq( as.Date(start_date), as.Date(end_date), by="+1 month")
    months_li = list()
    count = 1
    for(day in all_days){
        month = as.numeric(format(as.Date(day), "%m"))
        year = as.numeric(format(as.Date(day), "%Y"))
        
        if (month>= 3 & month <= 4){
            
            months_li[[count]] = list("warm", day,month, year)
        }
        else if(month > 4 & month < 11){    
                months_li[[count]] = list("rain",day, month, year)
        }
        else if(month >= 8 & month < 11){    
                months_li[[count]] = list("templado",day, month, year)
        }
        else if(month >=11 ){
            months_li[[count]] = list("cold", day, month, year)
        }
        else if (month <=2 ){
            months_li[[count]] = list("cold", day, month, year-1)
        }
        
        count <- count +1
    }
    
    df_seasons <- data.frame(matrix(unlist(months_li), ncol= 4, byrow=TRUE))
    names(df_seasons) <- c("temporada","mes_year", "mes", "ano")
    print(df_seasons)
    df_seasons$mes_year<-as.Date(as.numeric(df_seasons$mes_year))
    df_seasons_get <- df_seasons%>% 
        group_by( temporada , ano)%>%
        summarize(min_mes = min(mes_year), max_mes = max(mes_year) )
    
    df_seasons_get$max_mes <- df_seasons_get$max_mes + months(1) 
    print(df_seasons_get)
    df_seasons_get$name <- paste0(
        save_path_season,
        df_seasons_get$ano, "/",
        df_seasons_get$temporada, '_',
        df_seasons_get$ano,'.tif')
    by(df_seasons_get,
     seq_len(nrow(df_seasons_get)),

        function(row){
            print(row$min_mes)
            print(row$max_mes)
            print(splin_band)
            print(prediction_path)
            print(complete_band)
            print(splin_band)
            season_splin(
                prediction_path,
                row$name, 
                complete_band,
                splin_band,
                row$min_mes,
                row$max_mes,
            )
      }
    )
    return(df_seasons_get)
}

```


Let's tested it

```{r}
#| purl: false
#| echo: false

get_all_seasons_interval(
    "../data/raster/all_links_ZMVM/",
    "../data/raster/Season_tensor_ZMVM/",
    paste0(2022,"-03-01"),
    paste0(2022,"-04-30"),
    complete_band = "temperature_2m",
    splin_band = "PM25_predict"
    )
```

A call for each season can be made, this function cam be automatize to do it for all the period bu this is only an example. 
The last season tensor is unable to get because there is not  enought data. 


Here the band names has to be rename usin a python script in order the daily stimation could be done. 


## Daily Spline diario
The function works but it has to be done carfully because if the date intervals are wrong a error is produce. 

```{r}
#| purl: true
#| echo: false

get_all_days_spline_interval_metro <- function(
    start_date ,
    end_date , 
    file_path_prediction, #### Vamos a usar los symbolics
    file_path_season_tensor,
    data_pm_reanalisis_est , 
    complete_band =  "temperature_2m",
    splin_band ="PM25_predict",
    prefix_predic = "predi_25PM_",
    path_save_predictions_2,
    prefix_save_predic_2= "predict_just_rain_",
    ...

) {
    ###### Hay que hacerlo por separado y hacerlo cada uno y que solo 
    # tome los cachos bien el intervalo soloi de 1 año maximo
    
     
    all_months <- seq( as.Date(start_date), as.Date(end_date), by="+1 day") 
    
    count_year_pm = 1
    datos_pm = list()
    for(year in unique(format(all_months,"%Y" ) ) ){
        datos_pm[[count_year_pm]] <- paste0(data_pm_reanalisis_est,"datos_pm_",year , ".rda" )
        count_year_pm= count_year_pm+1
    }
    
    # for(year in unique(format(all_months,"%Y" ) ) ) {  
    #     if(format(as.Date(start_date), "%Y")==year) {
    #         start_date_fun = start_date
    #         path_save_predictions_fun = paste0(path_save_predictions_2,year,"/")
    #     }
    #     else{
    #         start_date_year_fun = as.numeric(format(as.Date(start_date), "%Y")) + 1
    #         start_date_fun = paste0(start_date_year_fun, "/01/01")
    #         path_save_predictions_fun = paste0(path_save_predictions_2,year,"/")
    #     }
    #     if(format(as.Date(end_date), "%Y")==year) {
    #         end_date_fun = end_date
    #     }
    #     else{
    #         end_date_year_fun = as.numeric(format(as.Date(end_date), "%Y"))-1
    #         end_date_fun = paste0(end_date_year_fun, "/12/31")
    #     }
        print(datos_pm)
        print("start_date")
        print(start_date)
        print("end_date")
        print(end_date)
        print(path_save_predictions_2)
        
        
        prediction_all_season(
            start_date, 
            end_date, 
            file_path_prediction= file_path_prediction, 
            file_path_season= file_path_season_tensor,
            prefix_predic = prefix_predic ,
            ban_complete_prediction  = complete_band,
            ban_exctract_prediction = splin_band,
            data_pm_reanalisis_est = datos_pm,
            path_save_predictions_2 = path_save_predictions_2,
            prefix_save_predic_2 = prefix_save_predic_2
        )
    # }
}

```


### Test to get season all days

Cold for the previus cold year season 
```{r}
#| purl: false
    
get_all_days_spline_interval_metro(
    start_date  = "2022-01-01",
    end_date = "2022-02-28", 
    file_path_prediction = "../data/raster/all_links_ZMVM/", #### Vamos a usar los symbolics
    file_path_season_tensor= "../data/raster/Season_tensor_ZMVM/",
    data_pm_reanalisis_est = "../data/data_station_obtained/", #path to file with  the data obtain in training
    complete_band =  "temperature_2m",
    splin_band ="PM25_predict",
    prefix_predic = "predi_25PM_",
    path_save_predictions_2 = "../data/raster/ZMVM_seasons_m3/",
    prefix_save_predic_2= "pred_mod_3_cold_",
)
```
Warm season example 
```{r}
#| purl: false
get_all_days_spline_interval_metro(
    start_date  = "2022-03-01",
    end_date = "2022-04-30", 
    file_path_prediction = "../data/raster/all_links_ZMVM/", #### Vamos a usar los symbolics
    file_path_season_tensor= "../data/raster/Season_tensor_ZMVM/",
    data_pm_reanalisis_est = "../data/data_station_obtained/", #path to file with  the data obtain in training
    complete_band =  "temperature_2m",
    splin_band ="PM25_predict",
    prefix_predic = "predi_25PM_",
    path_save_predictions_2 = "../data/raster/ZMVM_seasons_m3/",
    prefix_save_predic_2= "pred_mod_3_warm_",
)
```


Warm season example 
```{r}
#| purl: false
get_all_days_spline_interval_metro(
    start_date  = "2022-05-01",
    end_date = "2022-10-31", 
    file_path_prediction = "../data/raster/all_links_ZMVM/", #### Vamos a usar los symbolics
    file_path_season_tensor= "../data/raster/Season_tensor_ZMVM/",
    data_pm_reanalisis_est = "../data/data_station_obtained/", #path to file with  the data obtain in training
    complete_band =  "temperature_2m",
    splin_band ="PM25_predict",
    prefix_predic = "predi_25PM_",
    path_save_predictions_2 = "../data/raster/ZMVM_seasons_m3/",
    prefix_save_predic_2= "pred_mod_3_rain_",
)
```
A file to move the daily file to the corresponding year si made call `movev_pred_m3.sh`  this file should move the data using the prefic, in this example is no useful. 